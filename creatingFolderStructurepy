import os

# Define project structure (excluding the top-level "gpt-mini" folder)
structure = {
    "src/model": [
        "__init__.py",
        "attention.py",
        "transformer.py",
        "embeddings.py",
    ],
    "src/data": [
        "tokenizer.py",
        "dataloader.py",
    ],
    "src/train": [
        "trainer.py",
        "config.py",
    ],
    "src/utils": [
        "debug.py",
        "export.py",
    ],
    "tests": [
        "test_attention.py",
        "test_tokenizer.py",
        "test_generation.py",
    ],
    "configs": [
        "gpt1_char.yaml",
        "gpt2_bpe.yaml",
        "debug.yaml",
    ],
    "experiments": [
        "README.md",
    ],
    "deploy": [
        "app.py",
    ],
}

# Top-level files
top_level_files = [
    "requirements.txt",
    "train.py",
]

def create_structure(base="."):
    for folder, files in structure.items():
        folder_path = os.path.join(base, folder)
        os.makedirs(folder_path, exist_ok=True)
        for filename in files:
            file_path = os.path.join(folder_path, filename)
            if not os.path.exists(file_path):
                with open(file_path, "w", encoding="utf-8") as f:
                    f.write(f"# {filename}\n")
                    if filename.endswith(".py"):
                        f.write("\n\"\"\"Autogenerated file.\"\"\"\n")
    for filename in top_level_files:
        file_path = os.path.join(base, filename)
        if not os.path.exists(file_path):
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(f"# {filename}\n\n")

    print("Project structure created successfully!")

if __name__ == "__main__":
    create_structure()
